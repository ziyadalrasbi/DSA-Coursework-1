F28DA 2019-20 Semester 1

Data Structures and Algorithms
Lecture 5: Hash Tables
Manuel Maarek (Edinburgh)
Lucine Gharibian (Dubai)
0
1
2
3
4

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20


025-612-0001
981-101-0002


451-229-0004

1

Outline
❑

Hash Tables
◼

◼

Hash functions
Collision handling
 Separate Chaining (open addressing)
◼

Linked list, any other container class

 Closed addressing
◼
◼

Linear Probing
Double hashing

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

2

Recall the Map ADT
❑

❑

❑

❑
❑
❑
❑

get(k): if the map M has an entry with key k, return its
associated value; else, return null
put(k, v): insert entry (k, v) into the map M; if key k is not
already in M, then return null; else, return old value
associated with k
remove(k): if the map M has an entry with key k, remove
it from M and return its associated value; else, return null
size(), isEmpty()
entrySet(): return an iterable collection of the entries in M
keySet(): return an iterable collection of the keys in M
values(): return an iterator of the values in M

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

3

Intuitive Notion of a Map
❑

❑

Intuitively, a map M supports the abstraction
of using keys as indices with a syntax such as
M[k].
As a mental warm-up, consider a restricted
setting in which a map with n items uses keys
that are known to be integers in a range from
0 to N − 1, for some N ≥ n.

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

4

More General Kinds of Keys
❑

But what should we do if our keys are not
integers in the range from 0 to N – 1?
◼

◼

Use a hash function to map general keys to
corresponding indices in a table.
For instance, the last four digits of a Social Security
number.
0
1
2
3
4


025-612-0001
981-101-0002


451-229-0004

…
© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

5

Hash Functions and
Hash Tables
❑

❑

❑

❑

❑

A hash function h maps keys of a given type to
integers in a fixed interval [0, N - 1]
Example:
h(x) = x mod N
is a hash function for integer keys
The integer h(x) is called the hash value of key x

A hash table for a given key type consists of
◼ Hash function h
◼ Array (called table) of size N
When implementing a map with a hash table, the goal
is to store item (k, o) at index i = h(k)

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

6

Example
❑

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

0
1
2
3
4


025-612-0001
981-101-0002


451-229-0004

…

❑

We design a hash table for
a map storing entries as
(SSN, Name), where SSN
(social security number) is a
nine-digit positive integer
Our hash table uses an
array of size N = 10,000 and
the hash function
h(x) = last four digits of x

9997
9998
9999


200-751-9998



7

Hash Functions
❑

A hash function is
usually specified as the
composition of two
functions:
Hash code:
h1: keys → integers
Compression function:
h2: integers → [0, N - 1]

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

❑

❑

The hash code is
applied first, and the
compression function
is applied next on the
result, i.e.,
h(x) = h2(h1(x))
The goal of the hash
function is to
“disperse” the keys in
an apparently random
way
8

Hash Codes
❑

Memory address:
◼

◼

❑

We reinterpret the memory
address of the key object as
an integer (default hash code
of all Java objects)
Good in general, except for
numeric and string keys

❑

Component sum:
◼

Integer cast:
◼

◼

We reinterpret the bits of the
key as an integer
Suitable for keys of length less
than or equal to the number of
bits of the integer type (e.g.,
byte, short, int and float in
Java)

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

◼

We partition the bits of
the key into components
of fixed length (e.g., 16
or 32 bits) and we sum
the components
(ignoring overflows)
Suitable for numeric keys
of fixed length greater
than or equal to the
number of bits of the
integer type (e.g., long
and double in Java)

9

Hash Codes (cont.)
❑

Polynomial accumulation:
◼

◼

◼

We partition the bits of the
key into a sequence of
components of fixed length
(e.g., 8, 16 or 32 bits)
a0 a1 … an-1
We evaluate the polynomial
p(z) = a0 + a1 z + a2 z2 + …
… + an-1zn-1
at a fixed value z, ignoring
overflows
Especially suitable for strings
(e.g., the choice z = 33 gives
at most 6 collisions on a set
of 50,000 English words)

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

❑

Polynomial p(z) can be
evaluated in O(n) time
using Horner’s rule:
◼

❑

The following
polynomials are
successively computed,
each from the previous
one in O(1) time
p0(z) = an-1
pi (z) = an-i-1 + zpi-1(z)
(i = 1, 2, …, n -1)

We have p(z) = pn-1(z)
10

Compression Functions
❑

Division:
◼

◼

◼

❑

h2 (y) = y mod N
The size N of the
hash table is usually
chosen to be a prime
The reason has to do
with number theory
and is beyond the
scope of this course

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

Multiply, Add and
Divide (MAD):
◼
◼

◼

h2 (y) = (ay + b) mod N
a and b are
nonnegative integers
such that
a mod N  0
Otherwise, every
integer would map to
the same value b
11

Abstract Hash Map in Java

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

12

Abstract Hash Map in Java, 2

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

13

Collision Handling
❑

❑

Collisions occur when
different elements are
mapped to the same
cell
Separate Chaining: let
each cell in the table
point to a linked list of
entries that map there

© 2014 Goodrich, Tamassia, Goldwasser

0
1
2
3
4

❑


025-612-0001



451-229-0004

981-101-0004

Separate chaining is
simple, but requires
additional memory
outside the table

F28DA 2019-20

14

Map with Separate Chaining
Delegate operations to a list-based map at each cell:
Algorithm get(k):
return A[h(k)].get(k)

Algorithm put(k,v):
t = A[h(k)].put(k,v)
if t = null then
n=n+1
return t
Algorithm remove(k):
t = A[h(k)].remove(k)
if t ≠ null then
n=n-1
return t
© 2014 Goodrich, Tamassia, Goldwasser

{k is a new key}

{k was found}

F28DA 2019-20

15

Hash Table with Chaining

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

16

Hash Table with Chaining, 2

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

17

Linear Probing
❑

❑

❑

❑

Open addressing: the
colliding item is placed in a
different cell of the table
Linear probing: handles
collisions by placing the
colliding item in the next
(circularly) available table cell
Each table cell inspected is
referred to as a “probe”
Colliding items lump together,
causing future collisions to
cause a longer sequence of
probes

© 2014 Goodrich, Tamassia, Goldwasser

❑

Example:
◼
◼

h(x) = x mod 13
Insert keys 18, 41,
22, 44, 59, 32, 31,
73, in this order

0 1 2 3 4 5 6 7 8 9 10 11 12

41
18 44 59 32 22 31 73
0 1 2 3 4 5 6 7 8 9 10 11 12

F28DA 2019-20

18

Search with Linear Probing
❑

❑

Consider a hash table A
that uses linear probing
get(k)
◼
◼

We start at cell h(k)
We probe consecutive
locations until one of the
following occurs
 An item with key k is

found, or
 An empty cell is found,
or
 N cells have been
unsuccessfully probed
© 2014 Goodrich, Tamassia, Goldwasser

Algorithm get(k)
i  h(k)
p0
repeat
c  A[i]
if c = 
return null
else if c.getKey () = k
return c.getValue()
else
i  (i + 1) mod N
pp+1
until p = N
return null

F28DA 2019-20

19

Updates with Linear Probing
❑

❑

To handle insertions and ❑
deletions, we introduce a
special object, called
DEFUNCT, which replaces
deleted elements
remove(k)
◼

◼

◼

put(k, o)
◼

◼
◼

We search for an entry
with key k
If such an entry (k, o) is
found, we replace it with
the special item DEFUNCT
and we return element o
Else, we return null

© 2014 Goodrich, Tamassia, Goldwasser

We throw an exception
if the table is full
We start at cell h(k)
We probe consecutive
cells until one of the
following occurs
 A cell i is found that is
either empty or stores
DEFUNCT, or
 N cells have been
unsuccessfully probed

◼

F28DA 2019-20

We store (k, o) in cell i
20

Probe Hash Map in Java

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

21

Probe Hash Map in Java, 2

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

22

Probe Hash Map in Java, 3

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

23

Double Hashing
❑

❑

❑

Double hashing uses a
secondary hash function
d(k) and handles collisions
by placing an item in the
first available cell of the
series
(h(k) + j d(k)) mod N
for j = 0, 1, … , N - 1
The secondary hash
function d(k) cannot have
zero values
The table size N must be a
prime to allow probing of
all the cells

© 2014 Goodrich, Tamassia, Goldwasser

❑

Common choice of
compression function for
the secondary hash
function:
d2(k) = q - k mod q

where

◼
◼

❑

F28DA 2019-20

q<N
q is a prime

The possible values for
d2(k) are
1, 2, … , q

24

Example of Double Hashing
❑

Consider a hash
table storing integer
keys that handles
collision with double
hashing
(h(k) + j d(k)) mod N
◼
◼
◼

❑

N = 13
h(k) = k mod 13
d(k) = 7 - k mod 7

Insert keys 18, 41,
22, 44, 59, 32, 31,
73, in this order

© 2014 Goodrich, Tamassia, Goldwasser

k
18
41
22
44
59
32
31
73

h (k ) d (k ) Probes
5
2
9
5
7
6
5
8

3
1
6
5
4
3
4
4

5
2
9
5
7
6
5
8

10
9

0

0 1 2 3 4 5 6 7 8 9 10 11 12

31
41
18 32 59 73 22 44
0 1 2 3 4 5 6 7 8 9 10 11 12
F28DA 2019-20

25

Performance of
Hashing
❑

❑

❑

❑

In the worst case, searches,
insertions and removals on a
hash table take O(n) time
The worst case occurs when
all the keys inserted into the
map collide
The load factor a = n/N
affects the performance of a
hash table
Assuming that the hash
values are like random
numbers, it can be shown
that the expected number of
probes for an insertion with
open addressing is
1 / (1 - a)

© 2014 Goodrich, Tamassia, Goldwasser

❑

❑

❑

F28DA 2019-20

The expected running
time of all the dictionary
ADT operations in a
hash table is O(1)
In practice, hashing is
very fast provided the
load factor is not close
to 100%
Applications of hash
tables:
◼
◼
◼

small databases
compilers
browser caches
26

Summary
❑
❑
❑

Hash Tables
Hash and Compression functions
Collision handling methods:
◼
◼
◼

Separate chaining
Linear probing
Double hashing

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

27

Further reading
❑

Data Structures and Algorithms in Java, 6th
edition, by M. T. Goodrich, R. Tamassia, and
M. H. Goldwasser, Wiley, 2014
◼

❑

Chapter 10

Data Structures and Algorithm Analysis, by
Clifford A. Shaffer, 2013
◼

Chapter 9

© 2014 Goodrich, Tamassia, Goldwasser

F28DA 2019-20

28

