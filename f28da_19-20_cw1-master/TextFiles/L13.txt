F28DA 2019-20 Semester 1

Data Structures and Algorithms
Lecture 13: Security and Algorithm
Complexity
Manuel Maarek (Edinburgh)
Lucine Gharibian (Dubai)

By Elegant Themes [GPL],
via Wikimedia Commons

F28DA 2019-20

1

Outline
❑
❑

What is computer security?
How could algorithms impact security?
◼
◼
◼
◼

❑

Hash tables
Sorting
XML bomb
Zip bomb

Further resources on software security

F28DA 2019-20

2

What is computer security?
❑

❑

❑

Computer security is involved with the
security of computer systems
It is about the protection of data they
manipulate and services they provide
While safety is concerned with making
sure a system is behaving as expected
in normal circumstances, security is
about functioning as normal as possible
when under attack
F28DA 2019-20

3

What is computer security?
❑

What threats are we talking about (taking
the example of online banking):
◼

◼

◼

◼

Disrupting a service by making it unavailable (e.g.
unavailable card payment service)
Distorting a service by making it unreliable (e.g.
accept any card transaction regardless of
authentication)
Modifying sensitive data (e.g. unwilling change of
phone number associated to bank account)
Revealing confidential data (e.g. disclosure of
bank account details)
F28DA 2019-20

4

How could algorithms impact
security?
❑

❑

❑

We have seen algorithms which function is
primarily security: cryptographic algorithms
are intended to secure communications
We have seen the importance of time and
memory complexity in algorithm design;
how could they impact security?
Algorithms and their implementations could
be used maliciously to enter unexpected
situations
F28DA 2019-20

5

Hash tables
❑

❑
❑

❑

❑
❑

Hash table is an efficient data structure to
store and retrieve data
An hash table is fast O(1) in the average case
Yet, when collisions occur, the worst case
execution time is O(n)
Keeping enough available space in a hash
table decrease the risk of collision
But does it prevent it?
And what is the security risk with collision?
F28DA 2019-20

6

Hash tables
Hash table and the risk of collision

❑
"Hello World".hashCode == -862545276

What other string have the same hash code?

❑
"Hello World".hashCode
"Hello WormE".hashCode
"Hello WpSmE".hashCode
"Hello WpSld".hashCode
"Hello!8orld".hashCode
"Hello!8pSmE".hashCode
"HelmP World".hashCode
"HelmP!8pSme".hashCode
"HfMlo World".hashCode
"HfMmP!8pSme".hashCode
. . .

==
==
==
==
==
==
==
==
==
==

-862545276
-862545276
-862545276
-862545276
-862545276
-862545276
-862545276
-862545276
-862545276
-862545276
By Chassutt (www.accurateairmo.com) [CC0]
via Wikimedia Commons

F28DA 2019-20

7

Hash tables
Collision DoS attack
❑

❑

❑

❑

If collision can be triggered by an attacker it would
force O(n)-time per insertion, that is O(n2)-time when
inserting n entries
An attacker can degenerate the hash table by
sending lots of colliding keys
A Web application storing user input data into a
vulnerable hash table could suffer a Collision
Denial-of-Service attack
Collision DoS attacks trigger high CPU consumption
making the application or server to be inaccessible

F28DA 2019-20

8

Hash tables
Collision DoS attack
❑

❑

❑

Deterministic hash table implementations are
affected
Most programming languages now provide
randomized hash function
In Java, the vulnerability was progressively
fixed in version 7 and 8

F28DA 2019-20

9

Other worst case exploitation?
❑

❑

Are there other situation where worst case
running time unexpected to occur in practice
could be triggered by an attacker?
What other algorithms have different
worst/average-cases?

F28DA 2019-20

10

Other worst case exploitation?
❑

❑

❑

❑

Quick-Sort is expected to run O(n log n)-time while
its worst case is O(n2)
The choice of pivot (not an input) and the input
sequence are impacting the running-time of the
algorithm
It is a less-likely vector of attack because the choice
of pivot is not an input
But an attacker could find out the pivot used to forge
worst case unsorted sequences
◼

◼

E.g., if the pivot is the element in the middle, the following
sequence will be sorted in O(n2)
… 11 9 7 5 3 1 2 4 6 8 10 …
F28DA 2019-20

11

Other worst case exploitation?
❑

❑

❑

Quick-Sort is expected to run O(n log n)-time
while its worst case is O(n2)
Other sorting algorithms offer a guaranteed
execution time of O(n log n)
For instance, Java uses Timsort to sort array
of non primitive types

F28DA 2019-20

12

Other example of complexity attack

XML bomb
❑

In XML, entities could be defined in a DTD (old
standard for XML documents)

<?xml version="1.0"?>
<!DOCTYPE lecture [
<!ENTITY F28DA "Data Structures and Algorithms">
<!ELEMENT lecture (#PCDATA)>
]>
<lecture>
&F28DA; - Security and algorithm complexity
</lecture>
❑
❑

By Jmh2o [GFDL],
via Wikimedia Commons

Entities are shortcuts for special characters or strings
Entities gets replaced by they definition when the
document is parsed or displayed
F28DA 2019-20

13

Other example of complexity attack

XML bomb
❑

By Dake [GFDL],
via Wikimedia Commons

How many times lol gets printed?

<?xml version="1.0"?>
<!DOCTYPE lolz [
<!ENTITY lol "lol">
<!ELEMENT lolz (#PCDATA)>
<!ENTITY lol1 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;">
<!ENTITY lol2 "&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;">
<!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;">
<!ENTITY lol4 "&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;">
<!ENTITY lol5 "&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;">
<!ENTITY lol6 "&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;">
<!ENTITY lol7 "&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;">
<!ENTITY lol8 "&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;">
<!ENTITY lol9 "&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;">
]>
<lolz>&lol9;</lolz>
❑
❑

This is called billion laughs or XML bomb
It is a form of complexity DoS attack (small XML file expands in
about 3 gigabytes of memory)
F28DA 2019-20

14

Other example of complexity attack

Zip bomb
❑

❑

❑

A Zip bomb is similar, it uses an ill-formed
uncompressed text that triggers a high
performance of the compression algorithm
Zip uses a LZW-like algorithm
What text gives best LZW compression ratio?

F28DA 2019-20

15

Other example of complexity attack

Zip bomb
❑

❑

What text gives best LZW compression ratio?
Or, what LZW compressed text would give the largest
uncompressed text?

(initial dictionary: A B)
0 1 3 4 5
ABBBBBB

Ratio 7/4 = 1.75
0 1 3 4 5 6 7 8 9 10
ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

Ratio 37/9 = 4.11
0 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB...BBBBBBBBBBBBBBBB

Ratio 172/19 = 9.05
0 1 3 4 5 ... 30
ABBBBBBBB ... BB
Ratio 407/29 = 14.03
F28DA 2019-20

16

Summary
❑
❑

What computer security is
How algorithms could impact security
◼
◼
◼
◼

Hash tables
Sorting
XML bomb
Zip bomb

F28DA 2019-20

17

Further resources
❑

❑

❑

❑

Denial of service via algorithmic complexity
attacks, Scott A. Crosby, Dan S. Wallach,
12th USENIX Security Symposium, 2003
The GCHQ Puzzle Book, 2016
Software Security: Building Security, Gary
McGraw, 2006
Hacking: The Art of Exploitation, Jon
Erickson, 2008

From cover of Software Security: Building Security,
Gary McGraw, 2006

F28DA 2019-20

18

